 function [xtm,yrp]=TEMloop(ninv,resh)
% function [xtm,yrp]=TEMloop(t,resh,L_loop)
%**************************************************************************
% step response for the fixed loop configuration.
%此程序适用于圆形大回线响应，当接收点在回线内时的响应。表达式见《电磁法-纳比吉安》207页
%此时将1阶Bessel函数看做滤波器，将零阶Bessel函数看成核函数。
% INPUT:
% nlyr = number of layers
% cdt = array of layer conductivities
% thk = array of layer thicknesses
% istp =  curent of the step-functional excitation
% rad = radius of the transmitter
% xrx,yrx,zrx = X, Y and Z dimensional offset of the receiver from
%               transmitter
%
% OUTPUT
% xtm = array of time values for FD --> TD transformations
% yrp = ordinate values of the response as to abscissa xtm
%**************************************************************************
N=(ninv+1)/2;
rho=resh(1:N);
thk=resh(N+1:2*N-1);

istp=1;%%电流
trsh=0;%%飞行高度
rad=240/sqrt(pi);  %%%半径
xtm=load('time2.txt');   %%%特别注意此处必须换文件，为保持时间一致，不然反演里面矩阵维度不一致
%  xtm=t;  %%时间
% ifact = 0;
% rad = 100;
% trsh = 0;
% zrt = 0;
ofst =0;
% istp = 4;
% epsln0 = 8.85481e-12;
mu0 =  4*pi*10^(-7);

nlyr =length(rho);
% thk = [25,9999];
cdt =1./rho;

% %用正则表达式选择出响应的输出时间参数
% xtbg = -6;
% xted = 1;
% nxtm = 50;
% if ifact == 0
%     epslnr = zeros(1,nlyr);
% else
%     epsval = getappdata(hmainfig,'epslnr');
%     epsval(eps == 0)=[];
%     epslnr = epsval;
% end

nxtm=length(xtm);
yrp = zeros(1, nxtm);
for ni=1
j1k140 =  [   -6.76671159511e-014
    3.39808396836e-013
    -7.43411889153e-013
    8.93613024469e-013
    -5.47341591896e-013
    -5.84920181906e-014
    5.20780672883e-013
    -6.92656254606e-013
    6.88908045074e-013
    -6.39910528298e-013
    5.8209891253e-013
    -4.84912700478e-013
    3.54684337858e-013
    -2.10855291368e-013
    1.00452749275e-013
    5.58449957721e-015
    -5.67206735175e-014
    1.09107856853e-013
    -6.04067500756e-014
    8.84512134731e-014
    2.22321981827e-014
    8.38072239207e-014
    1.236478359e-013
    1.44351787234e-013
    2.94276480713e-013
    3.39965995918e-013
    6.1702467234e-013
    8.25310217692e-013
    1.32560792613e-012
    1.90949961267e-012
    2.93458179767e-012
    4.33454210095e-012
    6.55863288798e-012
    9.78324910827e-012
    1.47126365223e-011
    2.20240108708e-011
    3.30577485691e-011
    4.9537738148e-011
    7.43047574433e-011
    1.11400535181e-010
    1.67052734516e-010
    2.50470107577e-010
    3.7559721163e-010
    5.63165204681e-010
    8.44458166896e-010
    1.26621795331e-009
    1.89866561359e-009
    2.84693620927e-009
    4.26886170263e-009
    6.40104325574e-009
    9.59798498616e-009
    1.43918931885e-008
    2.15798696769e-008
    3.2358460081e-008
    4.85195105813e-008
    7.27538583183e-008
    1.09090191748e-007
    1.63577866557e-007
    2.4527519392e-007
    3.6778445873e-007
    5.51470341585e-007
    8.26916206192e-007
    1.23991037294e-006
    1.85921554669e-006
    2.78777669034e-006
    4.18019870272e-006
    6.26794044911e-006
    9.39858833064e-006
    1.40925408889e-005
    2.11312291505e-005
    3.168463429e-005
    4.75093313246e-005
    7.12354794719e-005
    0.00010681084846
    0.000160146590551
    0.000240110903628
    0.000359981158972
    0.000539658308918
    0.000808925141201
    0.00121234066243
    0.00181650387595
    0.00272068483151
    0.00407274689463
    0.00609135552241
    0.00909940027636
    0.0135660714813
    0.0201692550906
    0.0298534800308
    0.043906069722
    0.0639211368217
    0.0916763946228
    0.128368795114
    0.173241920046
    0.219830379079
    0.251193131178
    0.232380049895
    0.117121080205
    -0.117252913088
    -0.352148528535
    -0.27116287137
    0.29113474711
    0.317192840623
    -0.493075681595
    0.311223091821
    -0.136044122543
    0.0512141261934
    -0.0190806300761
    0.00757044398633
    -0.00325432753751
    0.00149774676371
    -0.000724569558272
    0.000362792644965
    -0.000185907973641
    9.67201396593e-005
    -5.07744171678e-005
    2.67510121456e-005
    -1.40667136728e-005
    7.33363699547e-006
    -3.7563876705e-006
    1.8634421128e-006
    -8.71623576811e-007
    3.61028200288e-007
    -1.05847108097e-007
    -1.5156936149e-008
    6.6763324142e-008
    -8.33741579804e-008
    8.31065906136e-008
    -7.53457009758e-008
    6.48057680299e-008
    -5.37558016587e-008
    4.32436265303e-008
    -3.37262648712e-008
    2.53558687098e-008
    -1.81287021528e-008
    1.20228328586e-008
    -7.10898040664e-009
    3.53667004588e-009
    -1.36030600198e-009
    3.52544249042e-010
    -4.53719284366e-011];
ybase140 = [1.23021441060956e-08
    1.50642652454717e-08
    1.84465476447708e-08
    2.25882321152758e-08
    2.76598223103399e-08
    3.38701039698534e-08
    4.14747401504397e-08
    5.07867962872965e-08
    6.21896283803482e-08
    7.61526648817817e-08
    9.32507319890900e-08
    1.14187717921627e-07
    1.39825550384683e-07
    1.71219680156832e-07
    2.09662531578486e-07
    2.56736708698645e-07
    3.14380147454904e-07
    3.84965896052592e-07
    4.71399807918321e-07
    5.77240169022846e-07
    7.06844184355837e-07
    8.65547354064846e-07
    1.05988312376283e-06
    1.29785185150378e-06
    1.58925016418009e-06
    1.94607426218947e-06
    2.38301377549967e-06
    2.91805650203308e-06
    3.57322892406365e-06
    4.37550298798851e-06
    5.35790647751830e-06
    6.56088269180448e-06
    8.03395540333459e-06
    9.83776763809460e-06
    1.20465782099028e-05
    1.47513187855098e-05
    1.80633373328250e-05
    2.21189820614506e-05
    2.70852145658433e-05
    3.31664832513391e-05
    4.06131400062293e-05
    4.97317466149803e-05
    6.08976952039969e-05
    7.45706622747454e-05
    9.13135325313455e-05
    0.000111815571553224
    0.000136920801278631
    0.000167662746452614
    0.000205306982471047
    0.000251403236217890
    0.000307849184767699
    0.000376968578399681
    0.000461606904068653
    0.000565248527578677
    0.000692160136934052
    0.000847566392101536
    0.00103786501228177
    0.00127089015533972
    0.00155623493212132
    0.00190564633283139
    0.00233350882368615
    0.00285743652240582
    0.00349899833105444
    0.00428460587828343
    0.00524660082552504
    0.00642458629903862
    0.00786705725981434
    0.00963339692992511
    0.0117963214636219
    0.0144448735046765
    0.0176880878678632
    0.0216594802522818
    0.0265225437765568
    0.0324774796156647
    0.0397694388242743
    0.0486986146435712
    0.0596326007686967
    0.0730215243383355
    0.0894165766369386
    0.109492704376099
    0.134076395703113
    0.164179704822979
    0.201041915949525
    0.246180561794986
    0.301453896912277
    0.369137397774225
    0.452017438922604
    0.553506001619263
    0.677781137291476
    0.829958968329531
    1.01630430711498
    1.24448856398208
    1.52390556159176
    1.86605825707188
    2.28503229238755
    2.79807586792439
    3.42630981135080
    4.19559707366589
    5.13760744759211
    6.29112134032723
    7.70362627399065
    9.43327183802693
    11.5512635744744
    14.1447943468665
    17.3206338705029
    21.2095241768200
    25.9715619630525
    31.8027894061794
    38.9432647698529
    47.6869450526937
    58.3937875239220
    71.5045683388003
    87.5590282823078
    107.218092659709
    131.291080075962
    160.769020227034
    196.865452320189
    241.066383700681
    295.191465366949
    361.468902830023
    442.627186225453
    542.007415996143
    663.700848336917
    812.717322831388
    995.191506060758
    1218.63544176104
    1492.24780443962
    1827.29258771346
    2237.56281709957
    2739.94837725005
    3355.13132977716
    4108.43734630878
    5030.87830832119
    6160.42899519354
    7543.59041880415
    9237.30416356921
    11311.2965409142
    13850.9490616428
    16960.8133969687
    20768.9155310974 ];
dnn = [ -0.0166666666666667
    16.0166666666667
    -1247
    27554.3333333333
    -263280.833333333
    1324138.70000000
    -3891705.53333333
    7053286.33333333
    -8005336.50000000
    5552830.50000000
    -2155507.20000000
    359251.200000000 ];
end
lambda = ybase140 ./ rad;   %通过滤波系数的自变量求出积分量lambda，注意lambda为一列矩阵
%% 利用for循环完成多时间求场值
for iik = 1:nxtm   
    t = xtm(iik);
    N = length(dnn);   %G-S算法中与计算机字长有关的常数，必须为偶数
    insum = 0; %利用下面的循环实现G-S中的求和
    for n = 1:N
        u = zeros(140, nlyr);
        kc = zeros(1, nlyr);

%         else
            for ii = 1:nlyr       %利用循环求出发射系数r
                kc(ii) = -n*log(2)/t *mu0* cdt(ii);
                u(:,ii) = sqrt((lambda).^2 - kc(ii));
            end
            uc0 = lambda;
%         end
        uc = u(:, nlyr);
        
        for ii = nlyr: -1:2       %利用循环求出反射系数r
            Tc=(u(:,ii-1)-uc)./(u(:,ii-1)+uc);
%             pl=exp(-2.*u(:,ii-1).*thk(ii-1));
            uc = u(:,ii-1).*((1 - Tc.*exp(-2.*u(:,ii-1) ...
                .*thk(ii-1))) ./ (1 + Tc.*exp(-2.*u(:,ii-1) ...
                .*thk(ii-1))));
        end
%         t1(n,:)=uc';
        r = (uc0-uc)./(uc0+uc);
        absj0 = lambda.*ofst;

        depj0 = besselj(0,absj0);
% 

        input1 = ((1+r.*exp(uc0.*(-2*trsh))) .* lambda.^2./uc0.*depj0);% ./ (-n.*log(2)./t); %求出laplace变换的象函数
        input2 = dnn(n) .* input1;
        insum = insum + input2;
    end
    input = log(2)/t .* insum;
    yrp(iik) =mu0*istp.*rad./2 * (j1k140'*input/rad);
    %此处相乘相当于起一次卷积和，滤波系数是翻摺、移位后的系数。直接相乘即是卷积。
end